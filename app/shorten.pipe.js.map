{"version":3,"file":"shorten.pipe.js","sourceRoot":"","sources":["shorten.pipe.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAoC,eAAe,CAAC,CAAA;AAEpD;;;;;;GAMG;AAIH;IAAA;IAaA,CAAC;IAXC,2BAAS,GAAT,UAAU,KAAa,EAAE,UAAkB;QACzC,EAAE,CAAC,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,MAAM,GAAG,UAAU,CAAC;YACtC,MAAM,CAAC,KAAK,CAAC;QACf,IAAI,SAAS,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;QAC5C,IAAI,kBAAkB,GAAG,SAAS,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;QACpD,EAAE,CAAC,CAAC,kBAAkB,IAAI,CAAC,CAAC,CAAC,CAAC;YAC5B,SAAS,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,kBAAkB,GAAG,CAAC,CAAC,CAAC;QAC1D,CAAC;QACD,MAAM,CAAC,SAAS,CAAC;IACnB,CAAC;IAdH;QAAC,WAAI,CAAC;YACJ,IAAI,EAAE,SAAS;SAChB,CAAC;;eAAA;IAcF,cAAC;AAAD,CAAC,AAbD,IAaC;AAbY,eAAO,UAanB,CAAA","sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\n\n/** \n * Pipe that shortens longer paragraphs to a maximum length.\n * The pipe tries to select the first n sentences (separated by a dot)\n * that together fits the specified maximum number of characters.\n * If no sentence can be found within the limit of characters, we just\n * cut the string to it's maximum number of characters allowed. \n */\n@Pipe({\n  name: 'shorten'\n})\nexport class Shorten implements PipeTransform {\n\n  transform(value: string, characters: number): string {\n    if (!value || value.length < characters)\n      return value;\n    let shortened = value.substr(0, characters);\n    let lastSentenceEnding = shortened.lastIndexOf('.');\n    if (lastSentenceEnding >= 0) {\n      shortened = shortened.substr(0, lastSentenceEnding + 1);\n    }\n    return shortened;\n  }\n\n}\n"]}